scatter.smooth(goldfinddata$Indicator1,goldfinddata$GoldFound)
goldfinddata$GoldFound<-factor(goldfinddata$GoldFound)
goldfinddata$Indicator1<-scale(goldfinddata$Indicator1)
goldfinddata$Indicator2<-scale(goldfinddata$Indicator2)
# check distribution
scatter.smooth(goldfinddata$Indicator1,goldfinddata$GoldFound)
scatter.smooth(goldfinddata$Indicator2,goldfinddata$GoldFound)
# run model
goldmodel<-glm(GoldFound~Indicator1+Indicator2,data=goldfinddata,family = "binomial")
summary(goldmodel)
# check multicollinearity
vif(goldmodel)
# check r squared
pR2(goldmodel)
# make predicttion
install.packages("ROCR")
install.packages("ROCR")
library(ROCR)
predictgold<-predict(goldmodel,type="response")
d<-na.exclude(goldfinddata) # exclude NA values
rpred<-prediction(predictgold,d$id)
# look at the performance of the prediction
rperf <-performance(rpred,"tpr","fpr")
predictgold<-predict(goldmodel,type="response")
cleaneddata<-na.exclude(goldfinddata) # exclude NA values
#use cleaned data to run prediction
rpred<-prediction(predictgold,cleaneddata$id)
predictgold<-predict(goldmodel,type="response")
cleaneddata<-na.exclude(goldfinddata) # exclude NA values
#use cleaned data to run prediction
rpred<-prediction(predictgold,cleaneddata$id)
#use cleaned data to run prediction
rpred<-prediction(predictgold,cleaneddata$id)
# make predicttion
install.packages("ROCR")
install.packages("ROCR")
library(ROCR)
predictgold<-predict(goldmodel,type="response")
cleaneddata<-na.exclude(goldfinddata) # exclude NA values
#use cleaned data to run prediction
rpred<-prediction(predictgold,cleaneddata$id)
predictgold<-predict(goldmodel,type="response")
cleaneddata<-na.exclude(goldfinddata) # exclude NA values
#use cleaned data to run prediction
rpred<-prediction(predictgold,cleaneddata$id)
#use cleaned data to run prediction
rpred<-prediction(predictgold,cleaneddata$GoldFound)
# look at the performance of the prediction
rperf <-performance(rpred,"tpr","fpr")
plot(rperf,colorize = TRUE)
# calculate area below the line
area_under_curve<-performance(rpred,measure="auc")
area_under_curve <- auc@y.values[(1)]
area_under_curve
area_under_curve <- area_under_curve@y.values[(1)]
area_under_curve
# check coefficients of the model
exp(goldmodel$coefficients)
###Q1: gold find data– two different indicators and whether gold was found or not. Generate a predictive model for finding gold.
library(readxl)
goldfinddata <-read_excel("/Users/luoxue/Desktop/HU/ANLY 510 Analytics II_Principles & Appl/week 6-correlation/Regression Section Review Data Files-20181208/GoldFindData.xlsx")
View(goldfinddata)
goldfinddata$GoldFound<-factor(goldfinddata$GoldFound)
goldfinddata$Indicator1<-scale(goldfinddata$Indicator1)
goldfinddata$Indicator2<-scale(goldfinddata$Indicator2)
# check distribution
scatter.smooth(goldfinddata$Indicator1,goldfinddata$GoldFound)
scatter.smooth(goldfinddata$Indicator2,goldfinddata$GoldFound)
# run model
goldmodel<-glm(GoldFound~Indicator1+Indicator2,data=goldfinddata,family = "binomial")
summary(goldmodel)
# check multicollinearity
vif(goldmodel)
# check multicollinearity
library(car)
vif(goldmodel)
# check r squared
library(pscl)
pR2(goldmodel)
library(ROCR)
predictgold<-predict(goldmodel,type="response")
cleaneddata<-na.exclude(goldfinddata) # exclude NA values
#use cleaned data to run prediction
rpred<-prediction(predictgold,cleaneddata$GoldFound)
# look at the performance of the prediction
rperf <-performance(rpred,"tpr","fpr")
plot(rperf,colorize = TRUE)
# calculate area below the line
area_under_curve<-performance(rpred,measure="auc")
area_under_curve <- area_under_curve@y.values[(1)]
area_under_curve
# check coefficients of the model
exp(goldmodel$coefficients)
###Q2:ShirtHatIDData – whether a suspect wore a shirt and or hat and whether they were pointed out by a victim/witness.
#Determine the impact of clothing on the likelihood of being identified as committing a crime.
shirt_hat_data <- read_excel("/Users/luoxue/Desktop/HU/ANLY 510 Analytics II_Principles & Appl/week 6-correlation/Regression Section Review Data Files-20181208/ShirtHatIDData.xlsx")
View(shirt_hat_data)
summary(shirt_hat_data)
shirt_hat_data$shirtMatch<- factor(shirt_hat_data$shirtMatch)
shirt_hat_data$hatMatch<- factor(shirt_hat_data$hatMatch)
# check distribution
table(shirt_hat_data$id,shirt_hat_data$shirtMatch)
table(shirt_hat_data$id,shirt_hat_data$hatMatch)
# run model
model<-glm(id~hatMatch*shirtMatch,data=shirt_hat_data,family = "binomial")
summary(model)
# check multicollinearity
library(car)
vif(model)
# check r squared, too small
install.packages("pscl")
install.packages("pscl")
library(pscl)
pR2(model)
# revise model
model2<-glm(id~hatMatch+shirtMatch,data=shirt_hat_data,family = "binomial")
summary(model2)
# check multicollinearity,passed
vif(model2)
# check r squared, too small
pR2(model2)
# make predicttion
install.packages("ROCR")
library(ROCR)
predict<-predict(model2,type="response")
d<-na.exclude(shirt_hat_data) # exclude NA values
rpred<-prediction(predict,d$id)
rperf <-performance(rpred,"tpr","fpr")
plot(rperf,colorize = TRUE)
# calculate area below the line
auc<-performance(rpred,measure="auc")
auc <- auc@y.values[(1)]
auc
# check coefficients of the model
exp(model2$coefficients)
predict<-predict(model,type="response")
d<-na.exclude(shirt_hat_data) # exclude NA values
rpred<-prediction(predict,d$id)
rperf <-performance(rpred,"tpr","fpr")
plot(rperf,colorize = TRUE)
# calculate area below the line
auc<-performance(rpred,measure="auc")
auc <- auc@y.values[(1)]
auc
# check coefficients of the model
exp(model$coefficients)
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, col="blue"))
install.packages(ggplot)
"ggplot2"
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
library(ggplot2)
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, col="blue"))
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy),col="blue")
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
ggplot(data=mtcars)
mtcars
mtcars
ggplot(data = mtcars,aes(x="disp",y="hp")+
geom_smooth()+
xlab("Displacement")+ylab("Gross horsepower")+ ggtitle("Car Model Comparison")
mtcars
ggplot(data = mtcars,aes(x="disp",y="hp")+
geom_smooth()+
xlab("Displacement")+ylab("Gross horsepower")+ ggtitle("Car Model Comparison")
mtcars
ggplot(data = mtcars,aes(x="disp",y="hp")+\
mtcars
ggplot(data = mtcars,aes(x="disp",y="hp")+\
mtcars
ggplot(data = mtcars,aes(x='disp',y='hp')+
geom_smooth()+
xlab("Displacement")+ylab("Gross horsepower")+ ggtitle("Car Model Comparison")
mtcars
ggplot(data = mtcars,aes(x='disp',y='hp')+
geom_smooth(formula = y ~ x)+
xlab("Displacement")+ylab("Gross horsepower")+ ggtitle("Car Model Comparison")
mtcars
ggplot(data = mtcars,aes(x='disp',y='hp')+
geom_smooth()+
xlab("Displacement")+ylab("Gross horsepower")+ ggtitle("Car Model Comparison")
mtcars
ggplot(data = mtcars,aes(x='disp',y='hp'))+
geom_smooth()+
xlab("Displacement")+ylab("Gross horsepower")+ ggtitle("Car Model Comparison")
mtcars
ggplot(data = mtcars,aes(x='dysp',y='hp'))+
geom_smooth()+
xlab("Displacement")+ylab("Gross horsepower")+ ggtitle("Car Model Comparison")
mtcars
ggplot2(data = mtcars,aes(x='disp',y='hp'))+
geom_smooth()+
xlab("Displacement")+ylab("Gross horsepower")+ ggtitle("Car Model Comparison")
mtcars
ggplot(data = mtcars,aes(x='disp',y='hp'))+
geom_smooth()+
xlab("Displacement")+ylab("Gross horsepower")+ ggtitle("Car Model Comparison")
ggplot(data = mtcars,aes(x='disp',y='hp'))
mtcars
ggplot(data = mtcars,geom=density, aes(x='disp',y='hp'))+
geom_smooth()+
xlab("Displacement")+ylab("Gross horsepower")+ ggtitle("Car Model Comparison")
mtcars
ggplot(data = mtcars, disp,hp)+
geom_smooth()+
xlab("Displacement")+ylab("Gross horsepower")+ ggtitle("Car Model Comparison")
mtcars
qgplot(disp,hp, data = mtcars)+
geom_smooth()+
xlab("Displacement")+ylab("Gross horsepower")+ ggtitle("Car Model Comparison")
mtcars
ggplot(disp,hp, data = mtcars+
xlab="Displacement"+ylab="Gross horsepower"+ main ="Car Model Comparison")+
mtcars
ggplot(disp,hp, data = mtcars+
xlab="Displacement"+ylab="Gross horsepower"+ main ="Car Model Comparison")+
mtcars
ggplot(disp,hp, data = mtcars+
xlab="Displacement", ylab="Gross horsepower",main ="Car Model Comparison")+
mtcars
ggplot(disp,hp, data = mtcars+
xlab="Displacement", ylab="Gross horsepower",main ="Car Model Comparison")+
mtcars
ggplot(disp,hp, data = mtcars,
xlab="Displacement", ylab="Gross horsepower",main ="Car Model Comparison")+
geom_smooth()
mtcars
ggplot(x=disp,y=hp, data = mtcars,
xlab="Displacement", ylab="Gross horsepower",main ="Car Model Comparison")+
geom_smooth()
mtcars
ggplot(data = mtcars,aes(x=disp,y=hp)
xlab="Displacement", ylab="Gross horsepower",main ="Car Model Comparison")+
mtcars
ggplot(data = mtcars,aes(x=disp,y=hp),
xlab="Displacement", ylab="Gross horsepower",main ="Car Model Comparison")+
geom_smooth()
mtcars
ggplot(data = mtcars,aes(x=disp,y=hp),
xlab="Displacement", ylab="Gross horsepower",ggtitle("Car Model Comparison"))+
geom_smooth()
mtcars
ggplot(data = mtcars,aes(x=disp,y=hp),
xlab="Displacement", ylab="Gross horsepower")+
geom_smooth()+
ggtitle("Car Model Comparison")
heartrate <- read_excel("/Users/luoxue/Desktop/HU/ANLY 510 Analytics II_Principles & Appl/Week 10/HeartRate.xlsx")
###
library(readxl)
heartrate <- read_excel("/Users/luoxue/Desktop/HU/ANLY 510 Analytics II_Principles & Appl/Week 10/HeartRate.xlsx")
View(heartrate)
heartrate <- read_excel("/Users/luoxue/Desktop/HU/ANLY 510 Analytics II_Principles & Appl/Week 10/HeartRate.xlsx")
View(heartrate)
plot(density(heartrate$heartrate))
# test skewness, no need for kurtosis
library(moments)
heartrate$testinglocation <- factor(heartrate$testinglocation)
heartrate$subject <- factor(heartrate$subject)
heartrate$exercise <- factor(heartrate$exercise)
heartrate$heartrate <- factor(heartrate$heartrate)
plot(density(heartrate$heartrate))
heartrate$testinglocation <- factor(heartrate$testinglocation)
heartrate$subject <- factor(heartrate$subject)
heartrate$exercise <- factor(heartrate$exercise)
plot(density(heartrate$heartrate))
###
library(readxl)
heartrate <- read_excel("/Users/luoxue/Desktop/HU/ANLY 510 Analytics II_Principles & Appl/Week 10/HeartRate.xlsx")
View(heartrate)
heartrate$testinglocation <- factor(heartrate$testinglocation)
heartrate$subject <- factor(heartrate$subject)
heartrate$exercise <- factor(heartrate$exercise)
plot(density(heartrate$heartrate))
# test skewness, no need for kurtosis
library(moments)
agostino.test(heartrate$heartrate)
library(lmerTest)
install.packages("lmerTest")
library(lmerTest)
model <- lmer(heartrate~ exercise+testinglocation+(1|subject),data=heartrate)
summary(model)
qqnorm(resid(model))
shapiro.test(residuals(model))
pairwise.t.test(heartrate$heartrate,heartrate$exercise, paired = TRUE, p.adjust.method = "bonferroni")
qqline(resid(model))
dist()?
?dist()
?dist
2+3+0+2
library(readr)
ozone<-read_csv("/Users/luoxue/Desktop/HU/ANLY 506 Exploratory Data Analytics/US EPA data 2017.csv")
ozone<-read_csv("/Users/luoxue/Desktop/HU/ANLY 506 Exploratory Data Analytics/US EPA data 2017.csv")
str(ozone)
library(readr)
ozone<-read_csv("/Users/luoxue/Desktop/HU/ANLY 506 Exploratory Data Analytics/US EPA data 2017.csv")
str(ozone)
table(ozone)
nrow(ozone)
ncol(ozone)
mean(ozone$`Observation Count`)
library(tidyverse)
names(ozone$`State Name`) <- gsub(" ", "_", names(ozone$`State Name`))
names(ozone$`State Name`) <- gsub(" ", ".", names(ozone$`State Name`))
ozone$`State Name`
str(ozone$`State Name`)
summary(ozone$`State Name`)
unique(ozone$`State Name`)
length(unique(ozone$`State Name`))
library(readxl)
Drugdata <- read_excel("/Users/luoxue/Desktop/HU/ANLY 510 Analytics II_Principles & Appl/Week 11 Random effects and nesting/DrugsData.xlsx")
View(Drugdata)
Drugdata$subject <- factor(Drugdata$subject)
Drugdata$location <- factor(Drugdata$location)
Drugdata$drug <- factor(Drugdata$drug)
Drugdata$levels <- factor(Drugdata$levels)
library(moments)
plot(density(Drugdata$levels))
library(readxl)
Drugdata <- read_excel("/Users/luoxue/Desktop/HU/ANLY 510 Analytics II_Principles & Appl/Week 11 Random effects and nesting/DrugsData.xlsx")
View(Drugdata)
Drugdata$subject <- factor(Drugdata$subject)
Drugdata$location <- factor(Drugdata$location)
Drugdata$drug <- factor(Drugdata$drug)
library(moments)
plot(density(Drugdata$levels))
agostino.test(Drugdata$levels)
agostino.test(log(Drugdata$levels))
library(readxl)
agostino.test(Drugdata$levels)
Drugdata$levels <- log(Drugdata$levels)
agostino.test(Drugdata$levels)
library(readxl)
Drugdata <- read_excel("/Users/luoxue/Desktop/HU/ANLY 510 Analytics II_Principles & Appl/Week 11 Random effects and nesting/DrugsData.xlsx")
View(Drugdata)
Drugdata$subject <- factor(Drugdata$subject)
Drugdata$location <- factor(Drugdata$location)
Drugdata$drug <- factor(Drugdata$drug)
library(moments)
plot(density(Drugdata$levels))
agostino.test(Drugdata$levels)
# fix skewness
agostino.test(log(Drugdata$levels))
Drugdata$levels2 <- log(Drugdata$levels)
agostino.test(Drugdata$levels2)
# check balance
table(Drugdata$subject)
table(Drugdata$location)
table(Drugdata$drug)
table(Drugdata$location,Drugdata$drug)
# run the model
model <- lmer(levels2 ~ drug + drug|location/subject), data= Drugdata)
# run the model
model <- lmer(levels2 ~ drug + drug|location/subject), data= Drugdata)
# run the model
model <- lmer(levels2 ~ drug + drug|location/subject), data= Drugdata)
# run the model
model <- lmer(levels2 ~ drug + drug|location/subject), data= Drugdata)
# run the model
model <- lmer(levels2 ~ drug + 1|location/subject), data= Drugdata)
# run the model
model <- lmer(levels2 ~ drug + (1|location/subject), data= Drugdata)
# run the model
library(lmerTest)
model <- lmer(levels2 ~ drug + (1|location/subject), data= Drugdata)
summary(model)
model2 <- lmer(levels2 ~ drug + (1|location/suject) + (drug|location),data = Drugdata)
model2 <- lmer(levels2 ~ drug + (1|location/subject) + (drug|location),data = Drugdata)
summary(model2)
# compare r square of the two models
library(MuMin)
# compare r square of the two models
install.packages("MuMin")
library(MuMin)
library("MuMin")
# compare r square of the two models
install.packages("MuMin")
# compare r square of the two models
install.packages("MuMIn")
library(MuMIn)
r.squaredGLMM(model)
r.squaredGLMM(model2)
# test residuals
qqnorm(resid(model2))
qqline(resid(model2))
shapiro.test(resid(model2))
install.packages("emmeans")
library(emmeans)
emmeans(model2, list(pairwise ~ drug), adjust = "holm")
library(readxl)
Drugdata <- read_excel("/Users/luoxue/Desktop/HU/ANLY 510 Analytics II_Principles & Appl/Week 11 Random effects and nesting/DrugsData.xlsx")
View(Drugdata)
Drugdata$subject <- factor(Drugdata$subject)
Drugdata$location <- factor(Drugdata$location)
Drugdata$drug <- factor(Drugdata$drug)
library(moments)
plot(density(Drugdata$levels))
agostino.test(Drugdata$levels)
# fix skewness
agostino.test(log(Drugdata$levels))
# check no negative value in levels, in order to log
Drugdata$levels2 <- log(Drugdata$levels)
agostino.test(Drugdata$levels2)
# check balance
table(Drugdata$subject)
table(Drugdata$location)
table(Drugdata$drug)
table(Drugdata$location,Drugdata$drug)
# run the model
library(lmerTest)
model <- lmer(levels2 ~ drug + (1|location/subject), data= Drugdata)
summary(model)
model2 <- lmer(levels2 ~ drug + (1|location/subject) + (drug|location),data = Drugdata)
summary(model2)
# compare r square of the two models, and model 2 better
install.packages("MuMIn")
install.packages("MuMIn")
library(MuMIn)
r.squaredGLMM(model)
r.squaredGLMM(model2)
# test residuals
qqnorm(resid(model2))
qqline(resid(model2))
shapiro.test(resid(model2))
install.packages("emmeans")
library(emmeans)
emmeans(model2, list(pairwise ~ drug), adjust = "holm")
library(readxl)
install.packages("rdrobust")
library(rdrobust)
RDDdata <- read_xlsx("/Users/luoxue/Desktop/HU/ANLY 510 Analytics II_Principles & Appl/Week 12 Quasi Experimental Methods Part I_ Censored and RDD/RDD Example.xls")
RDDdata <- read_xls("/Users/luoxue/Desktop/HU/ANLY 510 Analytics II_Principles & Appl/Week 12 Quasi Experimental Methods Part I_ Censored and RDD/RDD Example.xls")
RDDdata
View(RDDdata)
RDDdata <- read_xls("/Users/luoxue/Desktop/HU/ANLY 510 Analytics II_Principles & Appl/Week 12 Quasi Experimental Methods Part I_ Censored and RDD/RDD Example.xls, sheet="Data)
RDDdata <- read_excel("/Users/luoxue/Desktop/HU/ANLY 510 Analytics II_Principles & Appl/Week 12 Quasi Experimental Methods Part I_ Censored and RDD/RDD Example.xls, sheet="Data)
install.packages("rddtools")
library(rddtools)
RDDdata <- read_excel("/Users/luoxue/Desktop/HU/ANLY 510 Analytics II_Principles & Appl/Week 12 Quasi Experimental Methods Part I_ Censored and RDD/RDD Example.xls, sheet="Data)
RDDdata <- read_excel("/Users/luoxue/Desktop/HU/ANLY 510 Analytics II_Principles & Appl/Week 12 Quasi Experimental Methods Part I_ Censored and RDD/RDD Example.xls,sheet="Data)
RDDdata <- read_excel("/Users/luoxue/Desktop/HU/ANLY 510 Analytics II_Principles & Appl/Week 12 Quasi Experimental Methods Part I_ Censored and RDD/RDD Example.xls,sheet="Data")
RDDdata <- read_excel("/Users/luoxue/Desktop/HU/ANLY 510 Analytics II_Principles & Appl/Week 12 Quasi Experimental Methods Part I_ Censored and RDD/RDD Example.xls",sheet="Data")
View(RDDdata)
rdplot(RDDdata$posttest, RDDdata$pretest, c=215)
rdplot(RDDdata$posttest, RDDdata$pretest, c=215)
rd <- rdd_data(posttest,pretest, c=215, data=RDDdata,covar=cbind(age,frlunch,esol,gender))
view(rd)
bw <- rdd_bw_ik(rd)
bw
model <- rdd_reg_lm(rdd_object = rd, bw=bw,covariates = FALSE)
model2 <- rdd_reg_lm(rdd_object = rd, bw=bw, covariates = TRUE)
summary(model2)
library(rdrobust)
plotPlacebo(model2)
# test how sensitive it is to different bandwidth
plotSensi(model2, from = 1, to = 50, by=1)
rdplot(RDDdata$posttest, RDDdata$pretest, c=215)
# check if there is any outlier that mess the data
dens_test(model, bw= bw, plot = TRUE)
# check if covariates are similar on both sides
covarTest_dis(model2, bw=bw)
covarTest_mean(model2, bw=bw)
# try to fix the issues with robust method
model3 <- rdrobust(rdd_object = rd, bw=bw, covariates = TRUE)
# try to fix the issues with robust method
model3 <- rdrobust(RDDdata$posttest, RDDdata$pretest, c=215, all = TRUE, covs=cbind(RDDdata$age,RDDdata$frlunch,RDDdata$esol,RDDdata$gender))
summary(model3)
model3
cluster1 <- read_csv(""/Users/luoxue/Desktop/HU/ANLY 506 Exploratory Data Analytics/clustering_1.txt"")
cluster1 <- read_csv(""/Users/luoxue/Desktop/HU/ANLY 506 Exploratory Data Analytics/clustering_1.txt"")
cluster1 <- read_csv("/Users/luoxue/Desktop/HU/ANLY 506 Exploratory Data Analytics/clustering_1.txt")
library(readr)
cluster1 <- read_csv("/Users/luoxue/Desktop/HU/ANLY 506 Exploratory Data Analytics/clustering_1.txt")
View(cluster1)
cluster1 <- read_csv("/Users/luoxue/Desktop/HU/ANLY 506 Exploratory Data Analytics/clustering_1.txt",header = FALSE, sep = "")
cluster1<- read.csv("/Users/luoxue/Desktop/HU/ANLY 506 Exploratory Data Analytics/clustering_1.txt",header = FALSE, sep = " ")
View(cluster1)
cluster2<- read.csv("/Users/luoxue/Desktop/HU/ANLY 506 Exploratory Data Analytics/cluster_2.txt",header = FALSE, sep = " ")
cluster3<- read.csv("/Users/luoxue/Desktop/HU/ANLY 506 Exploratory Data Analytics/cluster_3.txt",header = FALSE, sep = " ")
mydata <- cbind(cluster1$V2,cluster2$V2,cluster3$V2)
View(mydata)
clusters <- cbind(cluster1$V2,cluster2$V2,cluster3$V2)
clusters <-data.frame(clusters)
colnames(clusters) <- c("c1","c2","c3")
View(clusters)
clusters <- data.frame(cbind(cluster1$V2,cluster2$V2,cluster3$V2))
View(clusters)
colnames(clusters) <- c("c1","c2","c3")
library(NbClust)
library (cluster)
library (clustertend)
library (factoextra)
install.packages("NbClust")
library(NbClust)
install.packages("cluster")
library (cluster)
install.packages("clustertend")
library (clustertend)
install.packages("factoextra")
install.packages("cluster")
fviz_nbclust(clusters, kmeans, method = "gap_stat")+ theme_classic()
install.packages("NbClust")
install.packages("cluster")
install.packages("clustertend")
install.packages("factoextra")
install.packages("factoextra")
library (factoextra)
library(NbClust)
library (cluster)
library (clustertend)
fviz_nbclust(clusters, kmeans, method = "gap_stat")+ theme_classic()
